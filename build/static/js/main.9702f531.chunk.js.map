{"version":3,"sources":["home/home.js","questionnaire/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","questionnaire/questionnaire.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","to","ROLES","quizQuestions","question","answers","content","type","Question","props","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","questionId","questionTotal","answerOptions","map","key","Result","quizResult","Questionnaire","state","answersCount","result","handleAnswerSelected","bind","shuffledAnswerOptions","shuffleArray","this","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","max","apply","filter","renderResult","renderQuiz","Component","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9702f531.chunk.js","sourcesContent":["import {\n    Link\n} from \"react-router-dom\";\n\nexport default function Home(){\n    return <>\n            <h1>We all want to get better, right?</h1>\n            <h2>But \"getting better\" is so subjective. How can one even know or tell others what better is? </h2>\n            <h2> Instead, we tried to be helpful </h2>\n\n            <h2>We’ll share with you ideas, concepts, frameworks and resources that can help you level up as a Software Engineer. </h2>\n\n            <div className=\"call-to-action\">\n                <Link to=\"/questionnaire\"><button> I’m ready, show me </button></Link>\n                <label>all free, no emails, no BS. We’re Engineers.</label>\n            </div>\n\n            <h2> From the creators of other fun things </h2>\n\n            <div className=\"card-group\">\n                <div className=\"card\"> softwareArchitectureAddict.com </div>\n                <div className=\"card\"> Forker video </div>\n                <div className=\"card\"> Chuckwho.com </div>\n            </div>\n        </>;\n}\n","const ROLES = {\n    \"JUNIOR\": \"Junior Software Engineer\",\n    \"NORMAL\": \"Software Engineer\",\n    \"SENIOR\": \"Senior Software Engineer\",\n    \"PRINCIPLE\": \"Principal Software Engineer\",\n    \"STAFF\": \"Staff Software Engineer\"\n}\n\nvar quizQuestions = [\n    {\n        question: \"When it’s unclear why you need to build a certain capability, what is your preference?\",\n        answers: [\n            {\n                content: \"As long as I understand the task, it’s fine for me\",\n                type: ROLES.JUNIOR\n            },\n            {\n                content: \"Ask my manager, this is their job\",\n                type: ROLES.NORMAL\n            },\n            {\n                content: \"I feel comfortable talking with various people (product, sales, etc.) and figure out the answer\",\n                type: ROLES.SENIOR\n            },\n            {\n                content: \"I’m usually the one who figure this thing out for others. I cannot work without it.\",\n                type: ROLES.PRINCIPLE\n            }\n        ]\n    },\n    {\n        question: \"When you lead projects, how big are they?\",\n        answers: [\n            {\n                content: \"I help with other projects, still didn’t lead one myself\",\n                type: ROLES.JUNIOR\n            },\n            {\n                content: \"I’m working on them myself, for a few weeks\",\n                type: ROLES.NORMAL\n            },\n            {\n                content: \"Me and 2-3 more people from my team, for a few weeks to a few months\",\n                type: ROLES.SENIOR\n            },\n            {\n                content: \"Me and 5-15 people from various teams, for a few weeks to a few months\",\n                type: ROLES.PRINCIPLE\n            },\n            {\n                content: \"I lead some of the biggest initiatives in the company, having at least 10 people working with me for more than a year\",\n                type: ROLES.STAFF\n            }\n        ]\n    },\n    {\n        question: \"Do you know well the company’s goals for the year and why these goals were chosen?\",\n        answers: [\n            {\n                content: \"Not really. I remember some numbers but not more than that. I don’t think it’s needed for me to work.\",\n                type: ROLES.JUNIOR\n            },\n            {\n                content: \"Yes, I know the goals well. I don’t know the rational for picking them\",\n                type: ROLES.NORMAL\n            },\n            {\n                content: \"I can explain the goals and why they’re critical for our success to other teammates\\n\",\n                type: ROLES.SENIOR\n            },\n            {\n                content: \"I use company’s goals to attract talent, use it during interviews and help onboarding new teammates\\n\",\n                type: ROLES.PRINCIPLE\n            }\n        ]\n    },\n    {\n        question: \"When others usually hear from you?\",\n        answers: [\n            {\n                content: \"I update my manager on my progress.\",\n                type: ROLES.JUNIOR\n            },\n            {\n                content: \"Mostly within my team. I provide context on my work.\",\n                type: ROLES.NORMAL\n            },\n            {\n                content: \"I tend to update on bigger forums around the projects I lead, or things I did to make others’ life easier\",\n                type: ROLES.SENIOR\n            },\n            {\n                content: \"It’s very common to hear from me on various projects and initiatives on email, Slack and f2f. Many people outside of my team knows my work.\",\n                type: ROLES.PRINCIPLE\n            }\n        ]\n    },\n    {\n        question: \"When others working on a big project (>6 months effort), when are they coming to consult with you?\",\n        answers: [\n            {\n                content: \"Very rarely. Maybe if it’s around code I wrote.\",\n                type: ROLES.JUNIOR\n            },\n            {\n                content: \"Here and there. I do have some expertise in specific types of systems or solutions, that people want o leverage my knowledge\",\n                type: ROLES.NORMAL\n            },\n            {\n                content: \"People consult with me on big projects where I have context around - from making sure requirements are solid to the solutions and tradeoffs they have in mind\",\n                type: ROLES.SENIOR\n            },\n            {\n                content: \"People consult with me on everything they feel is a big challenge. Even if I don’t have the context, they feel comfortable sharing and getting my perspective.\",\n                type: ROLES.PRINCIPLE\n            }\n        ]\n    }\n];\n\nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n  return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n  return (\n    <li className=\"answerOption\">\n      <input\n        type=\"radio\"\n        className=\"radioCustomButton\"\n        name=\"radioGroup\"\n        checked={props.answerType === props.answer}\n        id={props.answerType}\n        value={props.answerType}\n        disabled={props.answer}\n        onChange={props.onAnswerSelected}\n      />\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n        {props.answerContent}\n      </label>\n    </li>\n  );\n}\n\nAnswerOption.propTypes = {\n  answerType: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default AnswerOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nimport './quiz.css';\n\nfunction Quiz(props) {\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={props.answer}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n\n  return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={props.questionId}>\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\n        <Question content={props.question} />\n        <ul className=\"answerOptions\">\n          {props.answerOptions.map(renderAnswerOptions)}\n        </ul>\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nfunction Result(props) {\n  return (\n    <CSSTransitionGroup\n      className=\"container result\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div>\n        You Are a <strong>{props.quizResult}</strong>!\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nResult.propTypes = {\n  quizResult: PropTypes.string.isRequired\n};\n\nexport default Result;\n","import React, { Component } from 'react';\nimport quizQuestions from './quizQuestions';\n\nimport Quiz from '../components/Quiz';\nimport Result from '../components/Result';\n\nexport class Questionnaire extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            counter: 0,\n            questionId: 1,\n            question: '',\n            answerOptions: [],\n            answer: '',\n            answersCount: {},\n            result: ''\n        };\n\n        this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n    }\n\n    componentDidMount() {\n        const shuffledAnswerOptions = quizQuestions.map(question =>\n            this.shuffleArray(question.answers)\n        );\n        this.setState({\n            question: quizQuestions[0].question,\n            answerOptions: shuffledAnswerOptions[0]\n        });\n    }\n\n    shuffleArray(array) {\n        var currentIndex = array.length,\n            temporaryValue,\n            randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    }\n\n    handleAnswerSelected(event) {\n        this.setUserAnswer(event.currentTarget.value);\n\n        if (this.state.questionId < quizQuestions.length) {\n            setTimeout(() => this.setNextQuestion(), 300);\n        } else {\n            setTimeout(() => this.setResults(this.getResults()), 300);\n        }\n    }\n\n    setUserAnswer(answer) {\n        this.setState((state, props) => ({\n            answersCount: {\n                ...state.answersCount,\n                [answer]: (state.answersCount[answer] || 0) + 1\n            },\n            answer: answer\n        }));\n    }\n\n    setNextQuestion() {\n        const counter = this.state.counter + 1;\n        const questionId = this.state.questionId + 1;\n\n        this.setState({\n            counter: counter,\n            questionId: questionId,\n            question: quizQuestions[counter].question,\n            answerOptions: quizQuestions[counter].answers,\n            answer: ''\n        });\n    }\n\n    getResults() {\n        const answersCount = this.state.answersCount;\n        const answersCountKeys = Object.keys(answersCount);\n        const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n        const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n        return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n    }\n\n    setResults(result) {\n        if (result.length === 1) {\n            this.setState({ result: result[0] });\n        } else {\n            this.setState({ result: 'Undetermined' });\n        }\n    }\n\n    renderQuiz() {\n        return (\n            <Quiz\n                answer={this.state.answer}\n                answerOptions={this.state.answerOptions}\n                questionId={this.state.questionId}\n                question={this.state.question}\n                questionTotal={quizQuestions.length}\n                onAnswerSelected={this.handleAnswerSelected}\n            />\n        );\n    }\n\n    renderResult() {\n        return <Result quizResult={this.state.result} />;\n    }\n\n    render() {\n        return (\n            <div className=\"questionnaire\">\n                <div className=\"questionnaire-group\" />\n                {this.state.result ? this.renderResult() : this.renderQuiz()}\n            </div>\n        );\n    }\n}\n\nexport default Questionnaire;\n","// CSS\nimport './css-reset.css'\nimport './App.css';\n\n// PAGES\nimport Home from './home/home';\nimport Questionnaire from \"./questionnaire/questionnaire\";\n\n// PAGE RELATED STUFF\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n      <>\n          <div className=\"App\">\n              <div className=\"background\"/>\n              <div className=\"content\">\n              <Router>\n                  <div>\n                      {/* A <Switch> looks through its children <Route>s and\n                    renders the first one that matches the current URL. */}\n                      <Switch>\n                          <Route path=\"/questionnaire\">\n                              <Questionnaire />\n                          </Route>\n                          <Route path=\"/\">\n                              <Home />\n                          </Route>\n                      </Switch>\n                  </div>\n              </Router>\n              </div>\n          </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}